#version 330 core
#define M_PI 3.1415926535897932384626433832795

in vec2 v_texCoord;
in vec3 v_position;
in vec3 v_normal;
in vec4 v_lightSpace_position;

uniform vec4 u_color;
uniform bool u_fullBright;
uniform float u_roughness;
uniform float u_metallic;
uniform float u_f0;
uniform sampler2D u_textureSampler;
uniform sampler2DShadow u_shadowMapSampler;

uniform vec3 u_up;
uniform vec3 u_ambientColorUp;
uniform vec3 u_ambientColorDown;
uniform vec3 u_lightDirection;
uniform vec3 u_lightColor;

out vec4 o_fragColor;

float G1V(float dotNV, float k) {
	return 1.0 / (dotNV*(1.0 - k) + k);
}

vec3 GGX(vec3 N, vec3 V, vec3 L, float roughness, vec3 F0) {
	float alpha = roughness*roughness;

	vec3 H = normalize(V + L);

	float dotNL = max(dot(N, L), 0.0);
	float dotNV = max(dot(N, V), 0.0);
	float dotNH = max(dot(N, H), 0.0);
	float dotLH = max(dot(L, H), 0.0);

	// D (normal distribution term)
	float alphaSqr = alpha*alpha;
	float denom = dotNH * dotNH *(alphaSqr - 1.0) + 1.0;
	float D = alphaSqr / (M_PI * denom * denom);

	// F (fresnel term)
	vec3 F = F0 + (1.0 - F0)*pow(1.0 - dotLH, 5);

	// V (visibility term)
	float k = alpha / 2.0f;
	float vis = G1V(dotNL, k)*G1V(dotNV, k);

	vec3 specular = dotNL * D * F * vis;
	return specular;
}

float lambert(vec3 N, vec3 L, float F0) {
	float dotNL = max(dot(N, L), 0.0);
	float F = F0 + (1.0 - F0)*pow(1.0 - dotNL, 5);
	float diffuse = dotNL * (1.0 - F);
	return diffuse;
}

float visibility(vec4 lightSpace_position) {
	vec3 projCoords = (lightSpace_position.xyz / lightSpace_position.w) * 0.5 + 0.5;
	float fragment_depth = projCoords.z;

	float visibility = 0.0;
	vec2 texelSize = 1.0 / textureSize(u_shadowMapSampler, 0);
	for (int x = -1; x <= 1; ++x) {
		for (int y = -1; y <= 1; ++y) {
			vec3 offset = vec3(x * texelSize.x * 2.0, y * texelSize.y * 2.0, -0.015);
			visibility += texture(u_shadowMapSampler, projCoords + offset, 0.0);
		}
	}
	visibility /= 9.0;

	return visibility;
}

// Hash without Sine
// stolen from here https://www.shadertoy.com/view/4djSRW
#define HASHSCALE1 .1031
float hash12(vec2 p) {
	vec3 p3 = fract(vec3(p.xyx) * HASHSCALE1);
	p3 += dot(p3, p3.yzx + 19.19);
	return fract((p3.x + p3.y) * p3.z);
}

vec4 dither(vec4 color) {
	color.xyz *= 0.975 + 0.05 * (hash12(gl_FragCoord.xy) + hash12(gl_FragCoord.xy + 3.1337) - 0.5);
	return color;
}

void main() {
	vec4 color = u_color;

	if (textureSize(u_textureSampler, 0).x > 1) { // check if texture is bound
		color *= texture(u_textureSampler, v_texCoord);
	}

	if (u_fullBright) {
		o_fragColor = color;
		return;
	}

	vec3 N = normalize(v_normal);
	vec3 V = normalize(-v_position);
	vec3 L = normalize(-u_lightDirection);
	vec3 F0 = mix(vec3(u_f0), color.xyz, u_metallic);

	float diffuse = lambert(N, L, u_f0) * (1 - u_metallic);
	vec3 specular = GGX(N, V, L, u_roughness, F0);
	float visibility = visibility(v_lightSpace_position);

	vec4 ret = color;
	ret.xyz *= mix(u_ambientColorDown, u_ambientColorUp, dot(u_up, N) * 0.5 + 0.5);
	ret.xyz += (diffuse * color.xyz + specular) * u_lightColor * visibility;

	o_fragColor = dither(ret);
}