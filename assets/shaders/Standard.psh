#version 330 core
#define MAX_SAMPLES 64
#define NUM_LIGHTS 2

in vec2 v_texCoord;
in vec3 v_position;
in vec3 v_normal;
in vec4 v_lightSpace_position[NUM_LIGHTS];
in mat3 v_tangent2view;

// material
uniform vec3 u_color;
uniform bool u_fullBright;
uniform float u_roughness;
uniform float u_metallic;
uniform sampler2D u_textureSampler;
uniform sampler2D u_normalMapSampler;
uniform sampler2D u_dispMapSampler;
uniform sampler2D u_roughnessMapSampler;

// ambient light
uniform vec3 u_up;
uniform vec3 u_ambientColorUp;
uniform vec3 u_ambientColorDown;

// lights
uniform sampler2DShadow u_shadowMapSampler[NUM_LIGHTS];
uniform vec3 u_lightDirection[NUM_LIGHTS];
uniform vec3 u_lightColor[NUM_LIGHTS];
uniform float u_shadowMapTexelSize;

// camera
uniform float u_exposure;
uniform mat4 projection;

// SSAO
uniform sampler2D u_depthMapSampler;
uniform int u_numSamples;
uniform vec3 u_samples[MAX_SAMPLES];

out vec4 o_fragColor;

// Hash without Sine
// stolen from here https://www.shadertoy.com/view/4djSRW
#define HASHSCALE1 .1031
float hash12(vec2 p) {
	vec3 p3 = fract(vec3(p.xyx) * HASHSCALE1);
	p3 += dot(p3, p3.yzx + 19.19);
	return fract((p3.x + p3.y) * p3.z);
}
#define HASHSCALE3 vec3(.1031, .1030, .0973)
vec2 hash22(vec2 p) {
	vec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);
	p3 += dot(p3, p3.yzx + 19.19);
	return fract((p3.xx + p3.yz) * p3.zy);
}
vec3 dither(vec3 color) {
	color *= 0.975 + 0.05 * (hash12(gl_FragCoord.xy) + hash12(gl_FragCoord.xy + 3.1337) - 0.5);
	return color;
}
float linearize_depth(float d, float zNear, float zFar) {
	return zNear * zFar / (zFar + d * (zNear - zFar));
}

float D_GGX(float dotNH, float a) {
	float a2 = a * a;
	float denom = dotNH * dotNH * (a2 - 1.0) + 1.0;
	return a2 / (denom * denom);
}
float F_Schlick(float dotVH, float f0, float f90) {
	return f0 + (f90 - f0) * pow(1.0 - dotVH, 5.0);
}
vec3 F_Schlick(float dotVH, vec3 f0) {
	return f0 + (1.0 - f0) * pow(1.0 - dotVH, 5.0);
}
vec3 F_Schlick(float dotVH, vec3 f0, float a) {
	vec3 f = f0 + (1.0 - f0) * pow(1.0 - dotVH, 5.0);
	vec3 avg = mix(f0, vec3(1.0), 0.0475);
	return mix(f, avg, a);
}
float Fd_Markus(float dotNV, float dotNL, float a) {
	float lightScatter = 1.0 - F_Schlick(dotNL, vec3(0.04), a).r;
	float viewScatter = 1.0 - F_Schlick(dotNV, vec3(0.04), a).r;
    float energyCompensation = 1.091;
	return energyCompensation * lightScatter * viewScatter;
}
float V_SmithGGXCorrelated(float dotNV, float dotNL, float a) {
	float a2 = a * a;
	float lambdaV = dotNL * sqrt((dotNV - a2 * dotNV) * dotNV + a2);
	float lambdaL = dotNV * sqrt((dotNL - a2 * dotNL) * dotNL + a2);
	return 0.5 / (lambdaV + lambdaL + 1e-5);
}

float shadow(int light_index) {
	vec3 projCoords = (v_lightSpace_position[light_index].xyz / v_lightSpace_position[light_index].w) * 0.5 + 0.5;

    const float bias = -0.015;
    const int r = 1;

	float visibility = 0.0;
	for (int x = -r; x <= r; ++x) {
		for (int y = -r; y <= r; ++y) {
			vec3 offset = vec3(x * u_shadowMapTexelSize, y * u_shadowMapTexelSize, bias);
			visibility += texture(u_shadowMapSampler[light_index], projCoords + offset, 0.0);
		}
	}
	visibility /= (2 * r + 1) * (2 * r + 1);

	return visibility;
}

float occlusion(vec3 N) {
	//vec3 rvec = vec3(mod(gl_FragCoord.xy, 3) - 1, 0.0);
	vec3 rvec = vec3(hash22(gl_FragCoord.xy) * 2.0 - 1.0, 0.0);
	vec3 tangent = normalize(rvec - N * dot(rvec, N));
	vec3 bitangent = cross(N, tangent);
	mat3 tbn = mat3(tangent, bitangent, N);

	float originDepth = linearize_depth(gl_FragCoord.z, 0.1, 1000.0);
	vec3 origin = v_position;

	const float bias = 0.0;
	const float radius = 5.0;

	float occlusion = 0;
	for (int i = 0; i < u_numSamples; ++i) {
		// get sample position:
		vec3 sample = tbn * u_samples[i];
		sample = sample * radius + origin;
		// project sample position:
		vec4 offset = vec4(sample, 1.0);
		offset = projection * offset;
		offset.xy /= offset.w;
		offset.xy = offset.xy * 0.5 + 0.5;
		// get sample depth:
		float sampleDepth = texture(u_depthMapSampler, offset.xy).r;
		sampleDepth = linearize_depth(sampleDepth, 0.1, 1000.0);
		// range check & accumulate:
		float rangeCheck = smoothstep(0.0, 1.0, radius / abs(originDepth - sampleDepth));
		occlusion += (bias + sampleDepth < -sample.z ? 1.0 : 0.0) * rangeCheck;
	}

	return 1.0 - (occlusion / u_numSamples);
}

vec2 PM(vec2 uv, vec3 viewDir) {
    const float DEPTH_SCALE = 0.01;
    float depth = textureLod(u_dispMapSampler, uv, 0).r;
    vec2 p = (viewDir.xy / max(viewDir.z, 0.5)) * (depth * DEPTH_SCALE);
    return uv - p;
}

float PM_shadow(vec2 uv, vec3 lightDir) { 
    if (lightDir.z <= 1e-5) return 0.0;

    const float DEPTH_SCALE = 0.01;
    float depth = textureLod(u_dispMapSampler, uv, 0).r;
    vec3 p = (lightDir / max(lightDir.z, 0.5)) * (depth * DEPTH_SCALE);
    float new_depth = textureLod(u_dispMapSampler, uv + p.xy, 0).r;
    float intersection_depth = new_depth - (depth + p.z);

    return smoothstep(-0.25, 0.0, intersection_depth);
}

vec2 POM(vec2 uv, vec3 viewDir) {
    const float DEPTH_SCALE = 0.05;
    const float MIN_LAYERS = 2.0;
    const float MAX_LAYERS = 16.0;
    float layers = mix(MAX_LAYERS, MIN_LAYERS, viewDir.z);

    float delta_depth = 1.0 / layers;
    vec2 delta_uv = (viewDir.xy / -viewDir.z) * (DEPTH_SCALE / layers);

    float layer_depth = 0.0;
    float texture_depth = textureLod(u_dispMapSampler, uv, 0).r;
    while (layer_depth < texture_depth) {
        layer_depth += delta_depth;
        uv += delta_uv;
        texture_depth = textureLod(u_dispMapSampler, uv, 0).r;
    }

    vec2 prev_uv = uv - delta_uv;
    float afterDepth = texture_depth - layer_depth;
    float beforeDepth = textureLod(u_dispMapSampler, prev_uv, 0).r - layer_depth + delta_depth;

    float weight = afterDepth / (afterDepth - beforeDepth);
    return mix(uv, prev_uv, weight);
}

float POM_shadow(vec2 uv, vec3 lightDir) {
    if (lightDir.z <= 1e-5) return 0.0;

    const float DEPTH_SCALE = 0.05;
    const float MIN_LAYERS = 1.0;
    const float MAX_LAYERS = 8.0;
    float layers = mix(MAX_LAYERS, MIN_LAYERS, lightDir.z);

    float texture_depth = textureLod(u_dispMapSampler, uv, 0).r;
    float layer_depth = texture_depth;
    
    float delta_depth = texture_depth / layers;
    vec2 delta_uv = (lightDir.xy / -lightDir.z) * (DEPTH_SCALE / layers) * texture_depth;
    
    float intersection_depth = 0.0;
    while (layer_depth > 0.0) {
        layer_depth -= delta_depth;
        uv -= delta_uv;
        texture_depth = textureLod(u_dispMapSampler, uv, 0).r;

        intersection_depth = min(
            texture_depth - layer_depth,
            intersection_depth
        );
    }

    return smoothstep(-0.25, 0.0, intersection_depth);
}

void main() {
	vec2 uv = v_texCoord;
    vec2 uv_dFdx = dFdx(v_texCoord);
    vec2 uv_dFdy = dFdy(v_texCoord);

	if (textureSize(u_dispMapSampler, 0).x > 1) {
		vec3 Vt = normalize(-v_position * v_tangent2view);
		uv = PM(uv, Vt);
	}

	vec3 color = u_color;
	if (textureSize(u_textureSampler, 0).x > 1) { // check if texture is bound
		color *= textureGrad(u_textureSampler, uv, uv_dFdx, uv_dFdy).rgb;
	}

    float roughness = u_roughness;
    if (textureSize(u_roughnessMapSampler, 0).x > 1) { // check if texture is bound
        roughness = textureGrad(u_roughnessMapSampler, uv, uv_dFdx, uv_dFdy).r;
    }

	if (u_fullBright) {
		o_fragColor = vec4(color, 1.0);
		return;
	}

    float alpha = roughness * roughness;
    vec3 F0 = mix(vec3(0.04), color, u_metallic);
	color *= (1.0 - u_metallic);
    vec3 V = normalize(-v_position);

	vec3 N = normalize(v_normal);
	if (textureSize(u_normalMapSampler, 0).x > 1) { // check if texture is bound
		vec3 Nt = textureGrad(u_normalMapSampler, uv, uv_dFdx, uv_dFdy).rgb * 2f - 1f;
		N = normalize(v_tangent2view * Nt);
	}

	vec3 R = reflect(-V, N);
	float dotNV = clamp(dot(N, V), 0.0, 1.0);

	vec3 aF = F_Schlick(dotNV, F0, roughness);
	vec3 aFd = 1.0 - F_Schlick(dotNV, vec3(0.04), roughness);

    float mixFactor = smoothstep(-roughness, roughness, dot(u_up, R));
	vec3 ambientDiffuseColor = mix(u_ambientColorDown, u_ambientColorUp, dot(u_up, N) * 0.5 + 0.5);
	vec3 ambientSpecularColor = mix(u_ambientColorDown, u_ambientColorUp, mixFactor);

	vec3 lighting = vec3(0);
	lighting += color * ambientDiffuseColor * aFd;
	lighting += ambientSpecularColor * aF;
	lighting *= occlusion(N);

	for (int i = 0; i < NUM_LIGHTS; ++i) {
		vec3 L = normalize(-u_lightDirection[i]);
		vec3 H = normalize(V + L);
		float dotNL = clamp(dot(N, L), 0.0, 1.0);
		float dotNH = clamp(dot(N, H), 0.0, 1.0);
		float dotVH = clamp(dot(V, H), 0.0, 1.0);

		float D = D_GGX(dotNH, alpha);
		vec3 F = F_Schlick(dotVH, F0);
		float vis = V_SmithGGXCorrelated(dotNV, dotNL, alpha);

        float Fd = Fd_Markus(dotNV, dotNL, roughness);

		vec3 direct = vec3(0);
		direct += color * Fd;
		direct += D * F * vis;
		direct *= dotNL * u_lightColor[i] * shadow(i);

        if (textureSize(u_dispMapSampler, 0).x > 1) {
            vec3 Lt = normalize(L * v_tangent2view);
            direct *= PM_shadow(uv, Lt);
        }

        lighting += direct;
	}

    lighting *= u_exposure;
	lighting = dither(lighting);
	o_fragColor = vec4(lighting, 1.0);
}